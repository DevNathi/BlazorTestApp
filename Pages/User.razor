@page "/user"
@using BlazorTestApp.Data
@using BlazorTestApp.Models
@inject TestDBContext dbContext

<h3>User</h3>

@if (Users != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Email</th>
                <th>BranchId</th>
                <th>WarehouseId</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.U_Id</td>
                    <td>@user.U_Firstname</td>
                    <td>@user.U_Lastname</td>
                    <td>@user.U_Email</td>
                    <td>@user.U_BranchId</td>
                    <td>@user.U_WarehouseId</td>
                    <td>@user.U_Active</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.U_Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users available.</p>
}

<form>
    <h4>Add/Edit User</h4>
    <div class="form-group">
        <label for="firstname">Firstname:</label>
        <input class="form-control" @bind="user.U_Firstname" />
    </div>
    <div class="form-group">
        <label for="lastname">Lastname:</label>
        <input class="form-control" @bind="user.U_Lastname" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <input class="form-control" @bind="user.U_Email" />
    </div>
    <div class="form-group">
        <label for="branchId">Branch:</label>
        <select class="form-control" @bind="user.U_BranchId">
            <option value="">Select Branch</option>
            @foreach (var branch in Branches)
            {
                Console.WriteLine($"Branch Id: {branch.B_Id}, Branch Name: {branch.B_Name}");
                <option value="@branch.B_Id">@branch.B_Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="warehouseId">Warehouse:</label>
        <select class="form-control" @bind="user.U_WarehouseId">
            <option value="">Select Warehouse</option>
            @foreach (var warehouse in Warehouses)
            {
                Console.WriteLine($"Warehouse Id: {warehouse.W_Id}, Warehouse Name: {warehouse.W_Name}");
                <option value="@warehouse.W_Id">@warehouse.W_Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="active">Active:</label>
        <input type="checkbox" @bind="user.U_Active" />
    </div>
    <button type="button" class="btn btn-success" @onclick="SaveUser">Save</button>
</form>

@code {
    private List<UserModel> Users;
    private List<Branch> Branches;
    private List<Warehouse> Warehouses;
    private UserModel user = new UserModel();

    protected override void OnInitialized()
    {
        LoadUsers();
        LoadBranches();
        LoadWarehouses();
    }
    private void LoadUsers()
    {
        Users = dbContext.Users?.ToList() ?? new List<UserModel>();
    }

    private void LoadBranches()
    {
        Branches = dbContext.Branches?.ToList() ?? new List<Branch>();
    }

    private void LoadWarehouses()
    {
        Warehouses = dbContext.Warehouses?.ToList() ?? new List<Warehouse>();
        Console.WriteLine($"Number of warehouses loaded: {Warehouses.Count}");
    }
    private void SaveUser()
    {
        if (user.U_Id == 0)
        {
            // Add new user
            dbContext.Users.Add(user);
        }
        else
        {
            // Update existing user
            dbContext.Users.Update(user);
        }

        dbContext.SaveChanges();

        // Clear the form
        user = new UserModel();

        // Refresh the user list
        LoadUsers();
    }

    private void EditUser(UserModel selectedUser)
    {
        user = selectedUser;
    }

    private void DeleteUser(int userId)
    {
        var userToDelete = dbContext.Users.Find(userId);
        if (userToDelete != null)
        {
            dbContext.Users.Remove(userToDelete);
            dbContext.SaveChanges();

            // Refresh the user list
            LoadUsers();
        }
    }
}
